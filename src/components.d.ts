/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface JgroupBankId {
        /**
          * The URL responsible for initiating an auth process
         */
        "authUrl": string;
        /**
          * The URL responsible for cancelling a started process
         */
        "cancelUrl": string;
        /**
          * The URL responsible for collecting the status of the process
         */
        "collectUrl": string;
        /**
          * Whether to use the dark theme
         */
        "darkTheme": false;
        /**
          * The language to use for localization
         */
        "language": 'sv' | 'en';
        /**
          * The URL responsible for initiating a sign process
         */
        "signUrl": string;
        /**
          * The type of BankID action to perform
         */
        "type": 'auth' | 'sign';
    }
}
export interface JgroupBankIdCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLJgroupBankIdElement;
}
declare global {
    interface HTMLJgroupBankIdElementEventMap {
        "completed": any;
    }
    interface HTMLJgroupBankIdElement extends Components.JgroupBankId, HTMLStencilElement {
        addEventListener<K extends keyof HTMLJgroupBankIdElementEventMap>(type: K, listener: (this: HTMLJgroupBankIdElement, ev: JgroupBankIdCustomEvent<HTMLJgroupBankIdElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLJgroupBankIdElementEventMap>(type: K, listener: (this: HTMLJgroupBankIdElement, ev: JgroupBankIdCustomEvent<HTMLJgroupBankIdElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLJgroupBankIdElement: {
        prototype: HTMLJgroupBankIdElement;
        new (): HTMLJgroupBankIdElement;
    };
    interface HTMLElementTagNameMap {
        "jgroup-bank-id": HTMLJgroupBankIdElement;
    }
}
declare namespace LocalJSX {
    interface JgroupBankId {
        /**
          * The URL responsible for initiating an auth process
         */
        "authUrl"?: string;
        /**
          * The URL responsible for cancelling a started process
         */
        "cancelUrl"?: string;
        /**
          * The URL responsible for collecting the status of the process
         */
        "collectUrl"?: string;
        /**
          * Whether to use the dark theme
         */
        "darkTheme"?: false;
        /**
          * The language to use for localization
         */
        "language"?: 'sv' | 'en';
        /**
          * Emitted when the BankID process is completed
         */
        "onCompleted"?: (event: JgroupBankIdCustomEvent<any>) => void;
        /**
          * The URL responsible for initiating a sign process
         */
        "signUrl"?: string;
        /**
          * The type of BankID action to perform
         */
        "type"?: 'auth' | 'sign';
    }
    interface IntrinsicElements {
        "jgroup-bank-id": JgroupBankId;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "jgroup-bank-id": LocalJSX.JgroupBankId & JSXBase.HTMLAttributes<HTMLJgroupBankIdElement>;
        }
    }
}
